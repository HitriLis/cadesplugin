// тестовый фаил .png
const testBase64String = ""; // Пример Base64 строки


function base64ToFile(base64String, filename) {
    // Удаляем префикс, если он есть
    const arr = base64String.split(',');
    const mime = arr[0].match(/:(.*?);/)[1];
    const bstr = atob(arr[1]);
    let n = bstr.length;
    const u8arr = new Uint8Array(n);

    while (n--) {
        u8arr[n] = bstr.charCodeAt(n);
    }

    const blob = new Blob([u8arr], { type: mime });
    const url = URL.createObjectURL(blob);

    // Создаем ссылку для скачивания
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
}


function canAsync(cadesplugin: CADESPlugin): cadesplugin is CADESPluginAsync {
    return !!(cadesplugin as CADESPluginAsync).CreateObjectAsync;
}

async function testSign(): Promise<void> {
    const thumbprint = 'AA476BAC99432503C5CB6DF90E879A39617150DE'
    if (canAsync(cadesplugin)) {
        const signature = await SignCreate(cadesplugin, thumbprint, testBase64String);
        if (signature !== null) {
            // const result = await SignVerify(cadesplugin, signature, 'data');
            const signatureBase64String = `data:application/octet-stream;base64,${signature}`;
            base64ToFile(signatureBase64String, 'test.png.sig');
        }
    } else {
        const signature = SignCreateSync(cadesplugin, thumbprint, testBase64String);
        if (signature !== null) {
            // const result = SignVerifySync(cadesplugin, signature, 'data');
            const signatureBase64String = `data:application/octet-stream;base64,${signature}`;
            base64ToFile(signatureBase64String, 'test.png.sig');
        }
    }
}

async function testListCertificates(): Promise<void> {
    if (canAsync(cadesplugin)) {
        await getCertificatesList(cadesplugin);
    } else {
        getCertificatesListSync(cadesplugin);
    }
}

async function getCertificatesList(cadesplugin: CADESPluginAsync): Promise<void> {
    const store = await cadesplugin.CreateObjectAsync('CAPICOM.Store');

    await store.Open(
        cadesplugin.CAPICOM_CURRENT_USER_STORE,
        cadesplugin.CAPICOM_MY_STORE,
        cadesplugin.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);

    const certificates = await store.Certificates;

    const div = document.getElementById('certs');
    if (div) {
        const certCount = await certificates.Count;
        for (let i = 1; i <= certCount; ++i) {
            const cert = await certificates.Item(i);
            const elem = document.createElement('p');
            elem.innerHTML = `${await cert.Thumbprint}<br/>${await cert.SubjectName}`;
            div.appendChild(elem);
        }
    }

    await store.Close();
}

function getCertificatesListSync(cadesplugin: CADESPluginSync): void {
    const store = cadesplugin.CreateObject('CAPICOM.Store');

    store.Open(
        cadesplugin.CAPICOM_CURRENT_USER_STORE,
        cadesplugin.CAPICOM_MY_STORE,
        cadesplugin.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);

    const div = document.getElementById('certs');
    if (div) {
        for (let i = 1; i <= store.Certificates.Count; ++i) {
            const cert = store.Certificates.Item(i);
            const elem = document.createElement('p');
            elem.innerHTML = `${cert.Thumbprint}<br/>${cert.SubjectName}`;
            div.appendChild(elem);
        }
    }

    store.Close();
}

async function SignCreate(cadesplugin: CADESPluginAsync, thumbprint: string, dataToSign: string): Promise<string | null> {
    const store = await cadesplugin.CreateObjectAsync('CAPICOM.Store');

    await store.Open(
        cadesplugin.CAPICOM_CURRENT_USER_STORE,
        cadesplugin.CAPICOM_MY_STORE,
        cadesplugin.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);

    const certs = await store.Certificates;
    const result = await certs.Find(cadesplugin.CAPICOM_CERTIFICATE_FIND_SHA1_HASH, thumbprint);

    if (await result.Count < 1) {
        alert('Certificate not found.');
        return null;
    }

    const cert = await result.Item(1);
    const signer = await cadesplugin.CreateObjectAsync('CAdESCOM.CPSigner');
    await signer.propset_Certificate(cert);

    const signedData = await cadesplugin.CreateObjectAsync('CAdESCOM.CadesSignedData');
    await signedData.propset_ContentEncoding(cadesplugin.CADESCOM_BASE64_TO_BINARY);
    await signedData.propset_Content(dataToSign);

    let signedMessage = '';
    try {
        signedMessage = await signedData.SignCades(signer, cadesplugin.CADESCOM_CADES_BES, true);
    } catch (err) {
        alert(cadesplugin.getLastError(err));
        return null;
    }

    await store.Close();
    return signedMessage;
}

function SignCreateSync(cadesplugin: CADESPluginSync, thumbprint: string, dataToSign: string): string | null {
    const store = cadesplugin.CreateObject('CAPICOM.Store');

    store.Open(
        cadesplugin.CAPICOM_CURRENT_USER_STORE,
        cadesplugin.CAPICOM_MY_STORE,
        cadesplugin.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);

    const result = store.Certificates.Find(cadesplugin.CAPICOM_CERTIFICATE_FIND_SHA1_HASH, thumbprint);

    if (result.Count < 1) {
        alert('Certificate not found.');
        return null;
    }

    const cert = result.Item(1);
    const signer = cadesplugin.CreateObject('CAdESCOM.CPSigner');
    signer.Certificate = cert;

    const signedData = cadesplugin.CreateObject('CAdESCOM.CadesSignedData');
    signedData.ContentEncoding = cadesplugin.CADESCOM_BASE64_TO_BINARY;
    signedData.Content = dataToSign;

    let signedMessage = '';
    try {
        signedMessage = signedData.SignCades(signer, cadesplugin.CADESCOM_CADES_BES, true);
    } catch (err) {
        alert(cadesplugin.getLastError(err));
        return null;
    }

    store.Close();

    return signedMessage;
}

async function SignVerify(cadesplugin: CADESPluginAsync, signature: string, origData: string): Promise<boolean> {
    const data = await cadesplugin.CreateObjectAsync('CAdESCOM.CadesSignedData');
    try {
        await data.propset_ContentEncoding(cadesplugin.CADESCOM_BASE64_TO_BINARY);
        await data.propset_Content(origData);
        await data.VerifyCades(signature, cadesplugin.CADESCOM_CADES_BES, true);
        return true;
    } catch (err) {
        alert(cadesplugin.getLastError(err));
        return false;
    }
}

function SignVerifySync(cadesplugin: CADESPluginSync, signature: string, origData: string): boolean {
    const data = cadesplugin.CreateObject('CAdESCOM.CadesSignedData');
    try {
        data.ContentEncoding = cadesplugin.CADESCOM_BASE64_TO_BINARY;
        data.Content = origData;
        data.VerifyCades(signature, cadesplugin.CADESCOM_CADES_BES, true);
        return true;
    } catch (err) {
        alert(cadesplugin.getLastError(err));
        return false;
    }
}

